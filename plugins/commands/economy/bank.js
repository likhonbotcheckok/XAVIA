import fs from "fs";
import path from "path";
import axios from "axios";
const dataPath = path.join(process.cwd(), "data", "bank.json");

const config = {
  name: "bank",
  aliases: ["b"],
  description: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶∏‡¶π",
  usage: "",
  cooldown: 3,
  permissions: [0, 1, 2],
  credits: "LIKHON"
};

const langData = {
  "en_US": {
    "menu": `üè¶ BANK SYSTEM MENU üè¶
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. Register Bank Account
2. Withdraw Money
3. Deposit Money
4. Rename Account
5. Check Balance
6. Transfer Money
7. Request Loan
8. Approve/Decline Loans
9. View Leaderboard
10. Exit`,
    "invalidOption": "‚ùå Please select a valid option (1-10).",
    "exit": "üëã Exited from Bank menu."
  },
  "bn_BD": {
    "menu": `üè¶ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Æ‡ßá‡¶®‡ßÅ üè¶
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
2. ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶®
3. ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ
4. ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
5. ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
6. ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
7. ‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®
8. ‡¶≤‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®/‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®
9. ‡¶ü‡¶™ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏
10. ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®`,
    "invalidOption": "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶™‡¶∂‡¶® (‡ßß-‡ßß‡ß¶) ‡¶¶‡¶ø‡¶®‡•§",
    "exit": "üëã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®‡•§"
  }
};

// Helper Functions
function loadBankData() {
  if (!fs.existsSync(dataPath)) return {};
  return JSON.parse(fs.readFileSync(dataPath));
}
function saveBankData(data) {
  fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
}
function ensureUser(bank, id) {
  if (!bank[id]) {
    bank[id] = {
      name: `User_${id}`,
      balance: 0,
      loan: 0,
      pendingLoan: 0
    };
  }
}

async function onCall({ message, args, getLang }) {
  const { senderID } = message;
  const bank = loadBankData();
  ensureUser(bank, senderID);
  const lang = getLang();

  if (!args[0]) {
    const res = await axios.get("https://i.ibb.co/8YbF6fW/bank.png", { responseType: "arraybuffer" });
    const image = Buffer.from(res.data, "utf-8");

    message.reply({
      body: lang("menu"),
      attachment: image
    }, (err, info) => {
      global.handleReply.push({
        name: config.name,
        messageID: info.messageID,
        author: senderID,
        type: "menu"
      });
    });
    return;
  }

  const command = args[0].toLowerCase();
  const user = bank[senderID];

  switch (command) {
    case "register":
      if (args[1]) {
        user.name = args.slice(1).join(" ");
        saveBankData(bank);
        message.reply(`‚úÖ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${user.name}`);
      } else {
        message.reply("‚û§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:");
        global.handleReply.push({
          name: config.name,
          messageID: message.messageID,
          author: senderID,
          type: "register"
        });
      }
      break;

    case "withdraw":
      const amount = parseInt(args[1]);
      if (isNaN(amount) || amount <= 0) return message.reply("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡¶ø‡¶®‡•§");
      if (amount > user.balance) return message.reply("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á‡•§");
      user.balance -= amount;
      saveBankData(bank);
      message.reply(`‚úÖ ${amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
      break;

    case "deposit":
      const deposit = parseInt(args[1]);
      if (isNaN(deposit) || deposit <= 0) return message.reply("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡¶ø‡¶®‡•§");
      user.balance += deposit;
      saveBankData(bank);
      message.reply(`‚úÖ ${deposit} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
      break;

    case "rename":
      const newName = args.slice(1).join(" ");
      if (!newName) return message.reply("‚ùå ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§");
      user.name = newName;
      saveBankData(bank);
      message.reply(`‚úÖ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§: ${newName}`);
      break;

    case "balance":
      message.reply(`üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${user.balance} ‡¶ü‡¶æ‡¶ï‡¶æ\nüìâ ‡¶≤‡ßã‡¶®: ${user.loan}`);
      break;

    case "transfer":
      const target = message.mentions[0]?.id;
      const amt = parseInt(args[2]);
      if (!target || isNaN(amt) || amt <= 0) return message.reply("‚ùå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡¶ø‡¶®‡•§");
      if (amt > user.balance) return message.reply("‚ùå ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§");
      ensureUser(bank, target);
      user.balance -= amt;
      bank[target].balance += amt;
      saveBankData(bank);
      message.reply(`‚úÖ ${amt} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ${bank[target].name} ‡¶ï‡ßá‡•§`);
      break;

    case "loan":
      const loanAmt = parseInt(args[1]);
      if (isNaN(loanAmt) || loanAmt <= 0) return message.reply("‚ùå ‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡¶ø‡¶®‡•§");
      user.pendingLoan = loanAmt;
      saveBankData(bank);
      message.reply(`üìå ‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${loanAmt} ‡¶ü‡¶æ‡¶ï‡¶æ`);
      break;

    case "approve":
    case "decline":
      if (message.permissions < 1) return message.reply("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶® ‡¶®‡¶æ‡•§");
      const uid = Object.keys(bank).find(id => bank[id].pendingLoan > 0);
      if (!uid) return message.reply("üì≠ ‡¶ï‡ßã‡¶®‡ßã pending ‡¶≤‡ßã‡¶® ‡¶®‡ßá‡¶á‡•§");
      if (command === "approve") {
        bank[uid].balance += bank[uid].pendingLoan;
        bank[uid].loan += bank[uid].pendingLoan;
        message.reply(`‚úÖ ${bank[uid].name} ‡¶è‡¶∞ ‡¶≤‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
      } else {
        message.reply(`‚ùå ${bank[uid].name} ‡¶è‡¶∞ ‡¶≤‡ßã‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`);
      }
      bank[uid].pendingLoan = 0;
      saveBankData(bank);
      break;

    case "top":
      const top = Object.entries(bank)
        .sort(([, a], [, b]) => b.balance - a.balance)
        .slice(0, 5)
        .map(([id, u], i) => `${i + 1}. ${u.name}: ${u.balance} ‡¶ü‡¶æ‡¶ï‡¶æ`)
        .join("\n");
      message.reply(`üèÜ ‡¶ü‡¶™ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:\n${top}`);
      break;

    case "exit":
      message.reply(lang("exit"));
      break;

    default:
      message.reply(lang("invalidOption"));
  }
}

// Reply Handler
async function handleReply({ event, message, getLang, handleReply }) {
  const { senderID, body } = event;
  const lang = getLang();
  const text = body.trim();

  if (handleReply.author !== senderID) return;

  switch (handleReply.type) {
    case "menu":
      message.args = [text];
      onCall({ message, args: message.args, getLang });
      break;

    case "register":
      message.args = ['register', text];
      onCall({ message, args: message.args, getLang });
      break;

    default:
      message.reply("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á‡•§");
  }
}

export default {
  config,
  langData,
  onCall,
  handleReply
};
